#!/bin/bash

# has_sudo_privileges()
# This function checks if the user has sudo privileges by running the 'sudo -v' command.
# The output is redirected to /dev/null to suppress any output. If the command succeeds,
# the function returns 0, indicating that the user has sudo privileges.
has_sudo_privileges() {
  sudo -v >/dev/null 2>&1
}

# print_with_color()
# This function takes a color string and a message string as arguments and prints the
# message in the specified color. The color is set using ANSI escape codes, and the
# reset_color variable is used to reset the color to the default after printing the
# message.
print_with_color() {
  local color="$1"
  local message="$2"
  local reset_color='\033[0;37m'

  case "${color}" in
    "cred")  color='\033[0;31m' ;;
    "cgreen")  color='\033[0;32m' ;;
    "cyellow")  color='\033[0;33m' ;;
    "cblue")  color='\033[0;34m' ;;
    "cpurple")  color='\033[0;35m' ;;
    *) color='\033[0;37m' ;;
  esac

  printf "${color}%s${reset_color}\n" "${message}"
}

# yes_no_prompt()
# This function prompts the user to enter 'y' or 'n' and returns the result as a boolean
# value. The function uses the stty command to set the terminal to raw mode, which allows
# it to read a single character without waiting for the user to press Enter. The function
# then restores the terminal settings to their original state.
yes_no_prompt() {
  local old_stty_cfg=$(stty -g)
  stty raw -echo
  local answer=$(head -c 1)
  stty ${old_stty_cfg}
  echo "${answer}" | grep -iq "^y"
}

# update_package_list()
# This function updates the package list using the 'apt update' command and checks if any
# packages can be upgraded. If an update is available, the function prompts the user to
# upgrade the packages automatically.
update_package_list() {
  print_with_color "nocolor" "\nUpdating package list..."
  if sudo apt update | grep -q "can be upgraded"; then
    print_with_color "cgreen" "UPDATE AVAILABLE"
    print_with_color "nocolor" "\nDo you want to automatically upgrade (y/n)?"
    if yes_no_prompt; then
      print_with_color "nocolor" "\nUpgrading packages..."
      sudo apt upgrade -y &>/dev/null
      print_with_color "cgreen" "DONE!"
    else
      print_with_color "nocolor"
    fi
  else
    print_with_color "cgreen" "ALREADY UP TO DATE"
  fi
}

# install_package()
# This function installs a package using the 'apt install' command if it is not already
# installed. The function checks if the package is already installed by running the
# 'command -v' command and redirecting the output to /dev/null. If the command fails,
# the package is installed.
install_package() {
  local package_name="$1"
  if ! command -v "${package_name}" &>/dev/null; then
    print_with_color "nocolor" "Installing ${package_name}..."
    if sudo apt install -y "${package_name}" &>/dev/null; then
      print_with_color "cgreen" "SUCCESS!"
    else
      print_with_color "cred" "FAIL."
      print_with_color "cblue" "You need to install ${package_name} manually in order to deploy IroXMusic, exiting..."
      exit 1
    fi
  else
    print_with_color "cgreen" "${package_name} is already installed."
  fi
}

# check_ffmpeg_version()
# This function checks the version of ffmpeg using the 'ffmpeg -version' command and
# prints a message if the version is lower than 4.0.
check_ffmpeg_version() {
  local ffmpeg_version=$(ffmpeg -version | grep -Po 'version \K[0-9.]*')
  if (( $(echo "${ffmpeg_version} < 4.0" | bc -l) )); then
    print_with_color "cblue" "Playing live streams not going to work since you have ffmpeg ${ffmpeg_version}, live streams are supported by version 4+.\n"
  fi
}

# install_nodejs_and_npm()
# This function installs Node.js and npm using the curl command to download the setup
# script from nodesource.com and the apt command to install the packages.
install_nodejs_and_npm() {
  if ! command -v npm &>/dev/null; then
    print_with_color "nocolor" "Installing Nodejs and Npm..."
    curl -fssL https://deb.nodesource.com/setup_19.x | sudo -E bash - &>nodelog.txt
    sudo apt install -y nodejs &>>nodelog.txt
    sudo npm i -g npm &>>nodelog.txt
    print_with_color "cgreen" "SUCCESS!"
  fi
}

# upgrade_pip_and_install_dependencies()
# This function upgrades pip using the 'pip3 install -U pip' command and installs the
# required dependencies using the 'pip3 install -U -r requirements.txt' command.
upgrade_pip_and_install_dependencies() {
  print_with_color "nocolor"
